doctype html
html
	head
		block topheader
		include ./header.pug
		include ./datatables.pug

		- if (typeof sortColumn === "undefined") {
			sortColumn = 0;
		- }
		- if (typeof sortDirection === "undefined") {
			sortDirection = "asc";
		- }
		- if (typeof pageLength === "undefined") {
			pageLength = 25;
		- }
		- if (typeof url === "undefined") {
			url = null;
		- }
		- if (typeof extraScript !== "undefined") {
		script.
			!{extraScript}
		- }
		- if (typeof extraCSS !== "undefined") {
		style(type="text/css").
			!{extraCSS}
		- }

		script.
			$(document).ready(async () => {
				const headers = #{JSON.stringify(head)};
				const table = $("#table").DataTable({
					data: [],
					columns: headers.map(i => ({ data: i })),
					pageLength: #{pageLength},
					order: [#{sortColumn}, #{sortDirection}],
					deferRender: true,
					scroller: true,
					scrollCollapse: true
				});

				if (!#{url}) {
					alert("This page has an invalid configuration. Please report this incident to @Supinic.");
					return;
				}

				const response = await fetch(#{url});
				const { data } = await response.json();

				const fixedData = data.map(i => {
					for (const key of Object.keys(i)) {
						if (!headers.includes(key)) {
							delete i[key];
						}
					}

					return i;
				});

				table.clear();
				table.rows.add(fixedData);
				table.draw();

				const spinnerEl = document.getElementById("spinner-loading");
				const parentEl = spinnerEl.parentNode;
				parentEl.removeChild(spinnerEl);

				table.columns.adjust();
			});

		meta(charset="UTF-8")
		style(type="text/css").
			td {
				word-break: break-word;
			}

			td.key-column {
				min-width: 100px;
			}

			#table_wrapper {
				padding: 10px 40px 0 40px !important;
			}

		include ./navigation.pug
	body
		block navigation

		- if (skipSpinner !== true) {
		div(class="d-flex flex-column align-items-center" id="spinner-loading")
			h5.
				Loading...
			br
			img(alt="Loading" src="/public/img/ppCircle.gif")
		- }

		table(id="table", class="table table-striped table-bordered")
			thead
				tr
					each key in head
						th #{key}
